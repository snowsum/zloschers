{"version":3,"sources":["style.css","breakpoint/_core.scss","breakpoint/_utils.scss","breakpoint/_grid.scss","breakpoint/_breakpoint.scss","_reset.scss","_fonts.scss","_globals.scss","susy/output/support/_rem.scss","susy/output/support/_clearfix.scss","_header.scss","susy/language/susy/_span.scss","susy/language/susy/_gutters.scss","_homepage.scss","_mixins.scss","_footer.scss","_navigation.scss"],"names":[],"mappings":"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","file":"style.css","sourcesContent":["@media (min-width: 0){body::before{content:'{ \"current\" : \"small\", \"all\" : [small ], \"position\" : 0 }';display:none}}/*! Grid based on https://github.com/necolas/griddle by Nicolas Gallagher (@necolas) */body{font-size:1em}.wrapper{margin-left:auto;margin-right:auto;padding-left:1.25em;padding-right:1.25em}img{max-width:100%}.no-js .responsive-image{display:none}.grid{display:block;padding:0;margin:0 -0.625em;text-align:left;letter-spacing:-0.31em;text-rendering:optimizespeed}.opera:-o-prefocus,.grid{word-spacing:-0.43em}.grid>.grid{overflow:hidden;margin-right:0;margin-left:0}.grid__cell{width:100%;display:-moz-inline-stack;display:inline-block;*vertical-align:auto;zoom:1;*display:inline;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0 0.625em;vertical-align:top;text-align:left;letter-spacing:normal;word-spacing:normal;text-rendering:auto}.grid--center{text-align:center}.grid__cell--center{display:block;margin:0 auto}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:baseline;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}.typl8-breakword{word-wrap:break-word}.typl8-normal-wrap{word-wrap:normal}.typl8-inherit-wrap{word-wrap:auto}.typl8-font-feature--smcp{-webkit-font-feature-settings:\"smcp\";-moz-font-feature-settings:\"smcp\";-ms-font-feature-settings:\"smcp\";font-feature-settings:\"smcp\"}.typl8-font-feature--onum{-webkit-font-feature-settings:'onum';-moz-font-feature-settings:'onum';-ms-font-feature-settings:'onum';font-feature-settings:'onum'}.typl8-drop-cap:first-letter{float:left;margin:10px 10px 0 0;padding:0 20px;font-size:4em;font-family:inherit;line-height:1;text-indent:0;background:transparent;color:inherit}p+.typl8-drop-cap{text-indent:0;margin-top:0}html{font:normal 112.5%/1.65 serif}body{-webkit-hyphens:auto;-moz-hyphens:auto;-ms-hyphens:auto;hyphens:auto;word-wrap:break-word;color:#444444}small{font-size:65%}h1,h2,h3,h4,h5,h6{line-height:1;margin-top:0;text-rendering:optimizeLegibility;color:#222222}.typl8-tera{font-size:117px;font-size:6.5rem;margin-bottom:4.56923px;margin-bottom:0.25385rem}.typl8-giga{font-size:90px;font-size:5rem;margin-bottom:5.94px;margin-bottom:0.33rem}.typl8-mega{font-size:72px;font-size:4rem;margin-bottom:7.425px;margin-bottom:0.4125rem}h1,.typl8-alpha{font-size:60px;font-size:3.33333rem;margin-bottom:8.91px;margin-bottom:0.495rem}h2,.typl8-beta{font-size:48px;font-size:2.6667rem;margin-bottom:11.1375px;margin-bottom:0.61875rem}h3,.typl8-gamma{font-size:36px;font-size:2rem;margin-bottom:14.85px;margin-bottom:0.825rem}h4,.typl8-delta{font-size:24px;font-size:1.3333333333333333rem;margin-bottom:22.275px;margin-bottom:1.2375rem}h5,.typl8-epsilon{font-size:21px;font-size:1.16667rem;margin-bottom:25.45714px;margin-bottom:1.41429rem}h6,.typl8-zeta{font-size:18px;font-size:1rem;margin-bottom:29.7px;margin-bottom:1.65rem}p{margin:auto auto 1.5em}p+p{text-indent:1.5em;margin-top:-1.5em}input,abbr,acronym,blockquote,code,kbd,q,samp,var{-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre code{word-wrap:normal;white-space:-moz-pre-wrap;white-space:pre-wrap}pre{white-space:pre}code{white-space:pre;font-family:monospace}abbr{-webkit-font-variant:small-caps;-moz-font-variant:small-caps;-ms-font-variant:small-caps;font-variant:small-caps;font-weight:600;text-transform:lowercase;color:gray}abbr[title]:hover{cursor:help}.typl8-lining dt,.typl8-lining dd{display:inline;margin:0}.typl8-lining dt+dt:before,.typl8-lining dd+dt:before{content:\"\\A\";white-space:pre}.typl8-lining dd+dd:before{content:\", \"}.typl8-lining dd:before{content:\": \";margin-left:-0.2em}.typl8-dictionary-style dt{display:inline;counter-reset:definitions}.typl8-dictionary-style dt+dt:before{content:\", \";margin-left:-0.2em}.typl8-dictionary-style dd{display:block;counter-increment:definitions}.typl8-dictionary-style dd:before{content:counter(definitions, decimal) \". \"}.typl8-blockquote p:last-of-type{margin-bottom:-0.825em}.typl8-blockquote+figcaption{display:block;font-size:inherit;text-align:right}.typl8-blockquote+figcaption:before{content:\"-\"}.typl8-pull-quote{position:relative;padding:1em}.typl8-pull-quote:before,.typl8-pull-quote:after{height:1em;opacity:0.15;position:absolute;font-size:4em;color:#dc976e}.typl8-pull-quote:before{content:'“';top:0;left:0}.typl8-pull-quote:after{content:'”';bottom:0;right:0}html{font-size:100%}body{-webkit-font-smoothing:antialiased;font-family:'Dosis', sans-serif}*{box-sizing:border-box}h1,h2,h3,h4{font-family:'Playfair Display', serif;font-weight:700;font-style:italic;color:#3e3e3e}.container{max-width:1100px;margin-left:auto;margin-right:auto}.container:after{content:\" \";display:block;clear:both}* html .clearfix{height:1%;overflow:visible}*+html .clearfix{min-height:1%}.clearfix:after{clear:both;content:\".\";display:block;height:0;visibility:hidden;font-size:0}.clr{clear:both}.main-header{height:300px;background:url(\"../images/header.png\") no-repeat;-webkit-background-size:cover;background-size:cover;font-family:'Open Sans', sans-serif;-webkit-filter:grayscale(100%);-webkit-transition:.5s ease-in-out;-moz-filter:grayscale(100%);-moz-transition:.5s ease-in-out;-ms-filter:grayscale(100%);-ms-transition:.5s ease-in-out;-o-filter:grayscale(100%);-o-transition:.5s ease-in-out;filter:grayscale(100%);transition:.5s ease-in-out;filter:gray}.logo{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;float:left;padding-left:0.83333%;padding-right:0.83333%;text-align:center}.logo img{max-width:300px;height:auto}main{margin-top:100px}.front-content{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;float:left;padding-left:0.83333%;padding-right:0.83333%}.front-content .teaser{margin-bottom:20px;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:25%;float:left;padding-left:0.83333%;padding-right:0.83333%}.front-content .teaser img{-webkit-filter:grayscale(100%);-webkit-transition:.5s ease-in-out;-moz-filter:grayscale(100%);-moz-transition:.5s ease-in-out;-ms-filter:grayscale(100%);-ms-transition:.5s ease-in-out;-o-filter:grayscale(100%);-o-transition:.5s ease-in-out;filter:grayscale(100%);transition:.5s ease-in-out;filter:gray;width:100%;height:auto}.front-content .teaser img:hover{-webkit-filter:grayscale(0%);-webkit-transition:.5s ease-in-out;-moz-filter:grayscale(0%);-moz-transition:.5s ease-in-out;-ms-filter:grayscale(0%);-ms-transition:.5s ease-in-out;-o-filter:grayscale(0%);-o-transition:.5s ease-in-out;filter:grayscale(0%);transition:.5s ease-in-out;filter:gray}.front-content .teaser .wrap{height:80px;display:table;padding:10px;border-top:1px solid #808080;border-bottom:1px solid #808080;width:100%}.front-content .teaser .wrap h2{display:table-cell;vertical-align:middle;font-size:1.5rem}.front-content .teaser .wrap h2 a{color:#4c4c4c;text-decoration:none}.front-content .teaser .content p{margin-top:10px;height:150px;border-bottom:1px solid #000}@media screen and (max-width: 1100px){.front-content .teaser{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:33.33333%;float:left;padding-left:0.83333%;padding-right:0.83333%}}@media screen and (max-width: 1100px) and (max-width: 720px){.front-content .teaser{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;float:left;padding-left:0.83333%;padding-right:0.83333%}}.layout-content{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:83.33333%;float:left;padding-left:0.83333%;padding-right:0.83333%;border-right:1px solid #a3a3a3}@media screen and (max-width: 1100px){.layout-content{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:75%;float:left;padding-left:0.83333%;padding-right:0.83333%;border:1px solid red}}@media screen and (max-width: 720px){.layout-content{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;float:left;padding-left:0.83333%;padding-right:0.83333%}}.layout-sidebar-first{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:16.66667%;float:left;padding-left:0.83333%;padding-right:0.83333%}@media screen and (max-width: 1100px){.layout-sidebar-first{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:25%;float:left;padding-left:0.83333%;padding-right:0.83333%}}@media screen and (max-width: 720px){.layout-sidebar-first{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;float:left;padding-left:0.83333%;padding-right:0.83333%}}footer{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;float:left;padding-left:0.83333%;padding-right:0.83333%;background:#2e2e2e;color:#fff;padding:10px 0}footer h2{color:#fff}footer a{color:#9cccff}nav .container{margin-top:20px;text-align:center}nav .container ul li{display:inline;padding:5px 10px}@media screen and (max-width: 720px){nav .container ul li{display:block;width:100%}}nav .container ul li a{font-family:Dosis, serif;color:#000;font-size:2rem;text-decoration:none;border-bottom:1px solid black}\n","$current-bp: 0;\n$counter: 0;\n\n// push small breakpoint label into list\n$first-breakpoint: append($first-breakpoint, ());\n\n// Javascript hook for current breakpoint label\n@media (min-width: 0) {\n    body::before { content: breakpoint-list(nth($first-breakpoint, 1), $first-breakpoint, $counter); display: none; }\n}\n@if ($ie-support) { .lt-ie9 head { font-family: breakpoint-list(nth($first-breakpoint, 1), $first-breakpoint, $counter); } }\n\n\n// Breakpoint mixin\n// =============================================================================\n\n@mixin breakpoint($min: false, $max: false, $label: false, $orientation: false, $wrapper: true, $resolution: false) {\n\n    // set warnings if arguments are invalid\n    @if ($min == false and $max == false and $label == false and $orientation == false and $wrapper == true and $resolution == false) {\n        @warn \"breakpoint requires you to pass some kind of argument. It can't read your mind. :)\";\n    }\n    @if ($min == 0 and $max == false and $label == false and $orientation == false and $wrapper == true and $resolution == false) {\n        @warn \"If you pass zero as a minimum you need to specify a max column value.\";\n    }\n\n    // create MQ labels\n    @if ($label) {\n\n        // normalize quotes\n        $label: quote(unquote($label));\n\n        $counter: $counter + 1;\n\n        // push label to label list names = push(names, myname)\n        $first-breakpoint: append($first-breakpoint, $label, comma);\n\n    }\n\n    // set current breakpoint for fluid function\n    $current-bp: $min;\n\n    // min width mq\n    @if ($min and $max == false) {\n        @if ($min > 0) {\n            // create min width mq\n            // can we remove duplication of code here?\n            @if ($orientation) {\n                @media ( min-width: (fixed($min) + em($grid-gutter)) * ($base-font-size / 16px) ) and ( orientation: $orientation ) {\n                    @include breakpoint-extras($min, $wrapper, $grid-overlay) { @content };\n                }\n            } @else {\n                @media ( min-width: (fixed($min) + em($grid-gutter)) * ($base-font-size / 16px) ) {\n\n                    // label current breakpoint\n                    @if($label) { body::before { content: breakpoint-list($label, $first-breakpoint, $counter); } }\n\n                    @include breakpoint-extras($min, $wrapper, $grid-overlay) { @content };\n                }\n            }\n            // ie fallback\n            @if ($ie-support and $min <= $ie-support and $orientation == false) {\n                .lt-ie9 {\n                    @include breakpoint-extras($min, $wrapper, $grid-overlay: false) { @content };\n\n                    // label current breakpoint\n                    @if($label) { & head { font-family: breakpoint-list($label, $first-breakpoint, $counter); } }\n\n\n                }\n            }\n        }\n    }\n\n    // max width mq\n    @if ($max) {\n        // create max only mq\n        @if ($min == 0 or $min == false) {\n            @if ($orientation) {\n                @media ( max-width: fixed($max) + em($grid-gutter) * ($base-font-size / 16px) ) and ( orientation: $orientation ) { @content }\n            } @else {\n                @media ( max-width: fixed($max) + em($grid-gutter) * ($base-font-size / 16px) ) { @content }\n            }\n        // create min and max mq\n        } @else {\n            @if ($orientation) {\n                @media ( min-width: fixed($min) + em($grid-gutter) * ($base-font-size / 16px) ) and ( max-width: fixed($max) + em($grid-gutter) ) and ( orientation: $orientation ) { @content }\n            } @else {\n                @media ( min-width: fixed($min) + em($grid-gutter) * ($base-font-size / 16px) ) and ( max-width: fixed($max) + em($grid-gutter) ) { @content }\n            }\n        }\n    }\n\n    // orientation only mq\n    @if ($min == false and $max == false) {\n        @if ($orientation) {\n            @media ( orientation: $orientation ) { @content }\n        }\n    }\n\n    // pixel ratio mq\n    @if ($resolution) {\n        // warn if invalid value\n        @if ($resolution != 'high' and $resolution != 'low') {\n            @warn \"$resolution only supports values of 'high' or 'low'\";\n        }\n        @if ($resolution == 'high') {\n            @media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) { @content }\n        }\n        @if ($resolution == 'low') {\n            @media (-webkit-max-device-pixel-ratio: 1.5), (max-resolution: 144dpi) { @content }\n        }\n        // ie fallback\n        @if ($ie-support and $resolution == 'low') {\n            .lt-ie9 { @content }\n        }\n    }\n}\n\n// private mixin for generating extras in a min width mq\n@mixin breakpoint-extras($min, $wrapper, $grid-overlay) {\n\n    @if($grid-overlay) { @include grid-overlay($min); }\n\n    // proper sizing of wrapper\n    @if($wrapper) { .wrapper { width: fixed($min) - em($grid-gutter); } }\n\n    @content\n\n}\n\n// Grid overlay\n// =============================================================================\n\n@mixin grid-overlay($col: false) {\n    .grid-overlay {\n        position: fixed; top: 0; bottom: 0; pointer-events: none; z-index: 10000;\n\n        $overlay-color: transparentize(red, .9);\n        background: -webkit-linear-gradient(left, transparent $grid-gutter, $overlay-color $grid-gutter, $overlay-color $grid-gutter + $grid-column);\n        background: -moz-linear-gradient(left, transparent $grid-gutter, $overlay-color $grid-gutter, $overlay-color $grid-gutter + $grid-column);\n        background: -o-linear-gradient(left, transparent $grid-gutter, $overlay-color $grid-gutter, $overlay-color $grid-gutter + $grid-column);\n        background: linear-gradient(left, transparent $grid-gutter, $overlay-color $grid-gutter, $overlay-color $grid-gutter + $grid-column);\n\n        @if ($col) {\n            left: 50%;\n            width: fixed($col) + em($grid-gutter);\n            margin-left: fixed($col) / -2 - (em($grid-gutter)/2);\n            -webkit-background-size: $grid-gutter + $grid-column;\n            -moz-background-size: $grid-gutter + $grid-column;\n            -o-background-size: $grid-gutter + $grid-column;\n            background-size: $grid-gutter + $grid-column;\n        } @else {\n            left: 0;\n            right: $grid-gutter;\n            -webkit-background-size: 25%;\n            -moz-background-size: 25%;\n            -o-background-size: 25%;\n            background-size: 25%;\n        }\n    }\n}\n@if($grid-overlay) { @include grid-overlay; }","// converting px to em\n@function em($px, $base: $base-font-size) { @return ($px / $base) * 1em; }\n\n// creates percentage width\n@function fluid($col, $avail: $current-bp) { @return (100% / $avail) * $col }\n\n// creates em width\n// pass false as a second argument to remove the built in gutter (for creating height measurements)\n@function fixed($col, $gutter: true) {\n    @if ($gutter) { @return $col * ( em($grid-column + $grid-gutter) ) }\n    @else { @return $col * ( em($grid-column + $grid-gutter) ) - em($grid-gutter) }\n}\n\n// create json formatted string of breakpoint info\n@function breakpoint-list($label, $first-breakpoint, $counter) {\n    @return '{ \"current\" : \"#{$label}\", \"all\" : [#{$first-breakpoint}], \"position\" : #{$counter} }';\n}","/*! Grid based on https://github.com/necolas/griddle by Nicolas Gallagher (@necolas) */\n\n// establish base font size in config so that media queries can be resized if the base context chagnes\nbody { font-size: em($base-font-size, 16px); }\n\n// wrapper defaults to 100% fluid with side gutters\n// when triggering a breakpoint wrapper becomes fixed width and centered\n.wrapper {\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: em($grid-gutter);\n    padding-right: em($grid-gutter);\n}\n\n// for responsive images\nimg { max-width: 100%; }\n.no-js .responsive-image { display: none; }\n\n// Grid container\n// Must only contain `.grid` or `.grid-cell` components as children.\n.grid {\n    display: block;\n    padding: 0;\n    margin: 0 -0.5 * em($grid-gutter);\n    // Ensure consistent default alignment\n    text-align: $grid-direction;\n    // Remove inter-unit whitespace for all non-monospace font-families\n    // If you're using a monospace base font, you will need to set the `grid`\n    // font-family to `sans-serif` and then redeclare the monospace font on\n    // the `grid-cell` objects.\n    letter-spacing: -0.31em;\n    // Protect against WebKit bug with optimizelegibility\n    text-rendering: optimizespeed;\n}\n\n.opera:-o-prefocus,\n.grid {\n    word-spacing: -0.43em;\n}\n\n// Child `grid` object adjustments\n// Used for more complex fixed-fluid hybrid grids\n.grid > .grid {\n    overflow: hidden;\n    margin-right: 0;\n    margin-left: 0;\n}\n\n\n// Grid units\n// No explicit width by default\n.grid__cell {\n    width: 100%;\n\n    display: -moz-inline-stack;\n    display: inline-block;\n    *vertical-align: auto;\n    zoom: 1;\n    *display: inline;\n\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n\n    margin: 0;\n    padding: 0 0.5 * em($grid-gutter);\n\n    /* controls vertical positioning of units */\n    vertical-align: top;\n\n    /* keeps unit content correctly aligned */\n    text-align: $grid-direction;\n\n    /* reset text defaults */\n    letter-spacing: normal;\n    word-spacing: normal;\n    text-rendering: auto;\n}\n\n// Modifier: horizontally center all grid units\n.grid--center {\n    text-align: center;\n}\n\n// Modifier: horizontally center one unit\n.grid__cell--center {\n    display: block;\n    margin: 0 auto;\n}","// Grid Variables\n// ==========================================================================\n\n$grid-column: 60px !default;\n$grid-gutter: 20px !default;\n$base-font-size: 16px !default;\n$grid-direction: left !default;\n\n// generate visual grid overlay on class .grid-overlay\n$grid-overlay: false !default;\n\n// fallback breakpoint (column count for < IE9)\n$ie-support: false !default;\n\n// label for your mobile first breakpoint\n$first-breakpoint: \"small\" !default;\n\n@import 'utils';\n@import 'core';\n@import 'grid';","/* Eric Meyer's Reset CSS v2.0 - http://cssreset.com */\nhtml,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:baseline;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}","/**\n *\n * =======================================================================\n   Word Wrap\n * =======================================================================\n */\n\n.typl8-breakword {\n  word-wrap: break-word;\n}\n\n.typl8-normal-wrap {\n  word-wrap: normal;\n}\n\n.typl8-inherit-wrap {\n  word-wrap: auto;\n}\n\n\n/**\n *\n * =======================================================================\n   OpenType\n * =======================================================================\n */\n\n.typl8-font-feature--smcp {\n  -webkit-font-feature-settings: \"smcp\";\n  -moz-font-feature-settings: \"smcp\";\n  -ms-font-feature-settings: \"smcp\";\n  font-feature-settings: \"smcp\";\n}\n\n.typl8-font-feature--onum {\n  -webkit-font-feature-settings: 'onum';\n  -moz-font-feature-settings: 'onum';\n  -ms-font-feature-settings: 'onum';\n  font-feature-settings: 'onum';\n}\n\n\n/**\n *\n * =======================================================================\n * Drop Capitals:\n * Extend this object into your markup.\n\n   <p class=\"typl8-drop-cap\">What a wonderful day it is out there wouldn't you'd say?</p>\n\n  * =======================================================================\n */\n\n.typl8-drop-cap:first-letter {\n  float: left;\n  margin: 10px 10px 0 0;\n  padding: 0 20px;\n  font-size: 4em;\n  font-family: inherit;\n  line-height: 1;\n  text-indent: 0;\n  background: transparent;\n  color: inherit;\n}\n\np + .typl8-drop-cap {\n  text-indent: 0;\n  margin-top: 0;\n}\n\n\n/**\n *\n * =======================================================================\n   Base Type\n * =======================================================================\n *\n */\n\nhtml {\n  font: normal 112.5%/1.65 serif; /* base font size 18px with 1.65 line-height */\n}\n\nbody {\n  -webkit-hyphens: auto;\n  -moz-hyphens: auto;\n  -ms-hyphens: auto;\n  hyphens: auto;\n  word-wrap: break-word;\n  color: #444444;\n}\n\n\n/**\n *\n * =======================================================================\n   Fine Print\n * =======================================================================\n */\n\nsmall {\n  font-size: 65%;\n}\n\n\n/**\n *\n * =======================================================================\n   Headings\n * =======================================================================\n */\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  line-height: 1;\n  margin-top: 0;\n  text-rendering: optimizeLegibility; /*  voodoo to enable ligatures and kerning | https://developer.mozilla.org/en-US/docs/CSS/text-rendering */\n  color: #222222;\n}\n\n\n/**\n* Extend included classes on any element of your\n* choosing for adjusting type based on the scale\n* provided.\n\n* For example:\n\n <h6 class=\"typl8-giga\">Awesome Headline</h6>\n <p class=\"typl8-tera\">a story about a dude</p>\n\n* Our Type Scale is as follows with px fallbacks\n* for IE 6-8 as they do not understand REM units.\n*\n* 18, 21, 24, 36, 48, 60, 72, 90, 117\n*\n*\n* Explanation:\n* margin-bottom = ( base font-size * base line-height ) / current font-size\n*\n* Makes sure that there's always one unit of measure's worth of space between shit\n* for headings. This is better than spacing using line-height because of the wrapping issue where we have\n* wrapping onto 2 lines with a high line-height.\n */\n\n.typl8-tera {\n  font-size: 117px;\n  font-size: 6.5rem; /* 117 / 18 = 6.5 */\n  margin-bottom: 4.56923px;\n  margin-bottom: 0.25385rem;\n}\n\n.typl8-giga {\n  font-size: 90px;\n  font-size: 5rem; /* 90 / 18 = 5 */\n  margin-bottom: 5.94px;\n  margin-bottom: 0.33rem;\n}\n\n.typl8-mega {\n  font-size: 72px;\n  font-size: 4rem; /* 72 / 18 = 4 */\n  margin-bottom: 7.425px;\n  margin-bottom: 0.4125rem;\n}\n\nh1,\n.typl8-alpha {\n  font-size: 60px;\n  font-size: 3.33333rem; /* 60 / 18 = 3.3333 */\n  margin-bottom: 8.91px;\n  margin-bottom: 0.495rem;\n}\n\nh2,\n.typl8-beta {\n  font-size: 48px;\n  font-size: 2.6667rem; /* 48 / 18 = 2.6667 */\n  margin-bottom: 11.1375px;\n  margin-bottom: 0.61875rem;\n}\n\nh3,\n.typl8-gamma {\n  font-size: 36px;\n  font-size: 2rem; /* 36 / 18 = 2 */\n  margin-bottom: 14.85px;\n  margin-bottom: 0.825rem;\n}\n\nh4,\n.typl8-delta {\n  font-size: 24px;\n  font-size: 1.3333333333333333rem; /* 24 / 18 = 1.3333 */\n  margin-bottom: 22.275px;\n  margin-bottom: 1.2375rem;\n}\n\nh5,\n.typl8-epsilon {\n  font-size: 21px;\n  font-size: 1.16667rem; /* 21 / 18 = 1.1667 */\n  margin-bottom: 25.45714px;\n  margin-bottom: 1.41429rem;\n}\n\nh6,\n.typl8-zeta {\n  font-size: 18px;\n  font-size: 1rem; /* 18 = 18 × 1 */\n  margin-bottom: 29.7px;\n  margin-bottom: 1.65rem;\n}\n\n\n/**\n *\n * =======================================================================\n   Paragraphs and Indentation\n * =======================================================================\n */\n\np {\n  margin: auto auto 1.5em; /* bottom margin for paragraphs */\n}\n\np + p {\n  text-indent: 1.5em; /* indent subsequent paragraphs */\n  margin-top: -1.5em; /* no top margin on subsequent paragraphs */\n}\n\n\n/**\n *\n * =======================================================================\n   Hyphens\n * =======================================================================\n */\n\ninput,\nabbr,\nacronym,\nblockquote,\ncode,\nkbd,\nq,\nsamp,\nvar {\n  /* Accepted values: [ none | manual | auto ] */ /* http://meyerweb.com/eric/thoughts/2012/12/17/where-to-avoid-css-hyphenation */\n  -webkit-hyphens: none;\n  -moz-hyphens: none;\n  -ms-hyphens: none;\n  hyphens: none;\n}\n\n\n/**\n *\n * =======================================================================\n   Code Blocks\n * =======================================================================\n */\n\npre code {\n  word-wrap: normal;\n  white-space: -moz-pre-wrap;\n  white-space: pre-wrap;\n}\n\npre {\n  white-space: pre;\n}\n\ncode {\n  white-space: pre;\n  font-family: monospace;\n}\n\n\n/**\n *\n * =======================================================================\n * Abbreviations Markup\n * Extend this object into your markup\n\n  <abbr title=\"hyper text markup language\">HMTL</abbr>\n\n * Extend this object into your markup.\n * =======================================================================\n */\n\nabbr {\n  -webkit-font-variant: small-caps;\n  -moz-font-variant: small-caps;\n  -ms-font-variant: small-caps;\n  font-variant: small-caps;\n  font-weight: 600;\n  text-transform: lowercase;\n  color: gray;\n}\n\nabbr[title]:hover {\n  cursor: help; /* cursor changed to a question mark when it has a title */\n}\n\n\n/**\n *\n * =======================================================================\n   Definition Lists\n * =======================================================================\n */\n\n/**\n * Lining Definition Style Markup\n *\n  <dl class=\"typl8-lining\">\n    <dt><b></b></dt>\n    <dd></dd>\n  </dl>\n *\n * Extend this object into your markup.\n *\n */\n.typl8-lining dt,\n.typl8-lining dd {\n  display: inline;\n  margin: 0;\n}\n.typl8-lining dt + dt:before,\n.typl8-lining dd + dt:before {\n  content: \"\\A\";\n  white-space: pre;\n}\n.typl8-lining dd + dd:before {\n  content: \", \";\n}\n.typl8-lining dd:before {\n  content: \": \";\n  margin-left: -0.2em;\n}\n\n\n/**\n * Dictionary Definition Style Markup\n *\n  <dl class=\"typl8-dictionary-style\">\n    <dt><b></b></dt>\n      <dd></dd>\n  </dl>\n *\n * Extend this object into your markup.\n *\n */\n.typl8-dictionary-style dt {\n  display: inline;\n  counter-reset: definitions;\n}\n.typl8-dictionary-style dt + dt:before {\n  content: \", \";\n  margin-left: -0.2em;\n}\n.typl8-dictionary-style dd {\n  display: block;\n  counter-increment: definitions;\n}\n.typl8-dictionary-style dd:before {\n  content: counter(definitions, decimal) \". \";\n}\n\n\n/**\n *\n * =======================================================================\n   Blockquotes\n * =======================================================================\n */\n\n/**\n * Blockquote Markup\n *\n  <figure>\n    <blockquote class=\"typl8-blockquote\" cite=\"\">\n      <p></p>\n    </blockquote>\n    <figcaption>\n      <cite>\n        <small><a href=\"\"></a></small>\n      </cite>\n    </figcaption>\n  </figure>\n *\n * Extend this object into your markup.\n *\n */\n\n.typl8-blockquote p:last-of-type {\n  margin-bottom: -0.825em;\n}\n\n.typl8-blockquote + figcaption {\n  display: block;\n  font-size: inherit;\n  text-align: right;\n}\n\n.typl8-blockquote + figcaption:before {\n  content: \"-\"; /* \"-\" is your citation flourish */\n}\n\n\n/**\n *\n * =======================================================================\n   Pull Quotes\n * =======================================================================\n */\n\n/**\n * Pull Quotes Markup\n *\n  <aside class=\"typl8-pull-quote\">\n    <blockquote>\n      <p></p>\n    </blockquote>\n  </aside>\n *\n * Extend this object into your custom stylesheet.\n *\n */\n.typl8-pull-quote {\n  position: relative;\n  padding: 1em;\n}\n.typl8-pull-quote:before,\n.typl8-pull-quote:after {\n  height: 1em;\n  opacity: 0.15;\n  position: absolute;\n  font-size: 4em;\n  color: #dc976e;\n}\n.typl8-pull-quote:before {\n  content: '“';\n  top: 0;\n  left: 0;\n}\n.typl8-pull-quote:after {\n  content: '”';\n  bottom: 0;\n  right: 0;\n}\n\n\n/**\n *\n * =======================================================================\n   Figures\n * =======================================================================\n */\n\n/**\n * Figures Markup\n *\n  <figure>\n    <figcaption>\n      <strong>Fig. 4.2 | </strong>Type Anatomy, an excerpt from Mark Boulton's book<cite title=\"http://designingfortheweb.co.uk/book/part3/part3_chapter11.php\">\"Designing for the Web\"</cite>\n    </figcaption>\n  </figure>\n *\n * Extend this object into your markup.\n *\n */\n\n\n/**\n *\n * =======================================================================\n   Foot Notes\n * =======================================================================\n */\n\n/**\n * Footnote Markup : Replace 'X' with your unique number for each footnote\n *\n  <article>\n    <p><sup><a href=\"#fn-itemX\" id=\"fn-returnX\"></a></sup></p>\n    <footer>\n      <ol class=\"foot-notes\">\n        <li id=\"fn-itemX\"><a href=\"#fn-returnX\">↩</a></li>\n      </ol>\n    </footer>\n  </article>\n *\n * Extend this object into your markup.\n *\n */\n\n\n\n","/* =======================================================================\n## ++ Susy\n========================================================================== */\n$susy:(\n        container-position: center,\n        last-flow: to,\n        columns: 12,\n        gutters: 1/4,\n        gutter-position: inside,\n);\n\n\n/* =======================================================================\n## ++ Globals\n========================================================================== */\nhtml{\n    font-size: 100%;\n}\n\nbody{\n    -webkit-font-smoothing: antialiased;\n    font-family: 'Dosis', sans-serif;\n}\n\n*{\n    box-sizing:border-box;\n}\n\nh1, h2, h3, h4 {\n  font-family: 'Playfair Display', serif;\n  font-weight:700;\n  font-style:italic;\n  color: #3e3e3e;\n}\n\n.container{\n  @include container(1100px);\n}\n\n\n/* =======================================================================\n## ++ Cleafix\n========================================================================== */\n\n/* float clearing for IE6 */\n* html .clearfix{\n height: 1%;\n overflow: visible;\n}\n\n/* float clearing for IE7 */\n*+html .clearfix{\n min-height: 1%;\n}\n\n/* float clearing for everyone else */\n.clearfix:after{\n clear: both;\n content: \".\";\n display: block;\n height: 0;\n visibility: hidden;\n font-size: 0;\n}\n\n.clr{clear:both;}\n\n\n\n\n\n\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n",".main-header {\n  height:300px;\n  background: url(\"../images/header.png\") no-repeat;\n  -webkit-background-size: cover;\n  background-size: cover;\n  font-family: 'Open Sans', sans-serif;\n  -webkit-filter: grayscale(100%);\n  -webkit-transition: .5s ease-in-out;\n  -moz-filter: grayscale(100%);\n  -moz-transition: .5s ease-in-out;\n  -ms-filter: grayscale(100%);\n  -ms-transition: .5s ease-in-out;\n  -o-filter: grayscale(100%);\n  -o-transition: .5s ease-in-out;\n  filter: grayscale(100%);\n  transition: .5s ease-in-out;\n  filter: gray; /* IE 6-9 */\n}\n\n.logo {\n  @include span(12);\n  text-align:center;\n  img {\n    max-width:300px;\n    height:auto;\n  }\n}","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","main{\n  margin-top: 100px;\n}\n\n.front-content{\n  @include span(12);\n    .teaser{\n      margin-bottom:20px;\n      @include span(3);\n        img{\n          -webkit-filter: grayscale(100%);\n          -webkit-transition: .5s ease-in-out;\n          -moz-filter: grayscale(100%);\n          -moz-transition: .5s ease-in-out;\n          -ms-filter: grayscale(100%);\n          -ms-transition: .5s ease-in-out;\n          -o-filter: grayscale(100%);\n          -o-transition: .5s ease-in-out;\n          filter: grayscale(100%);\n          transition: .5s ease-in-out;\n          filter: gray; /* IE 6-9 */\n          width:100%;\n          height:auto;\n\n        }\n        img:hover{\n          -webkit-filter: grayscale(0%);\n          -webkit-transition: .5s ease-in-out;\n          -moz-filter: grayscale(0%);\n          -moz-transition: .5s ease-in-out;\n          -ms-filter: grayscale(0%);\n          -ms-transition: .5s ease-in-out;\n          -o-filter: grayscale(0%);\n          -o-transition: .5s ease-in-out;\n          filter: grayscale(0%);\n          transition: .5s ease-in-out;\n          filter: gray; /* IE 6-9 */\n      }\n        .wrap{\n          height:80px;\n          display:table;\n          padding:10px;\n          border-top:1px solid #808080;\n          border-bottom:1px solid #808080;\n          width:100%;\n            h2{\n              display:table-cell;\n              vertical-align:middle;\n              font-size:1.5rem;\n                a{\n                  color: #4c4c4c;\n                  text-decoration:none;\n                }\n            }\n        }\n      .content{\n        p{\n          margin-top:10px;\n          height:150px;\n          border-bottom:1px solid #000;\n        }\n      }\n\n        @include tablets{\n          @include span(4);\n            @include phones{\n              @include span(12);\n          }\n        }\n    }\n}\n\n.layout-content{\n  @include span(10);\n  border-right:1px solid #a3a3a3;\n\n    @include tablets{\n      @include span(9);\n      border:1px solid red;\n    }\n\n  @include phones{\n    @include span(12);\n  }\n\n}\n\n.layout-sidebar-first{\n  @include span(2);\n\n    @include tablets{\n      @include span(3);\n    }\n\n  @include phones{\n    @include span(12);\n  }\n\n}\n\n\n\n\n","/* =======================================================================\n## ++ Media Queries\n========================================================================== */\n\n/* \n    Used for media queries. \n    Add these mixins in your normal scss flow.\n    \n    Eg.\n    .container{\n        width:1024px;\n        \n        @include tablets{\n            width:90%;\n        }\n    }\n*/ \n\n@mixin lowresmonitors{\n        @media screen and (max-width: 1350px){ @content;}\n}\n\n@mixin tablets{\n        @media screen and (max-width: 1100px){ @content; }\n}\n\n@mixin phones{\n        @media screen and (max-width: 720px){ @content; }\n}\n\n/* =======================================================================\n## ++ Unit transform\n========================================================================== */\n\n/*  \n    Used for making containers have width in percentages. \n    Usage: define elemnt width in px and the width of parent elemnt in px. \n    eg. .block{width:cp(512px, 1024px)} this will result in .block{width:50%;}   \n*/\n\n@function cp($target, $container) {\n    @return ($target / $container) * 100%;\n}\n\n/*  \n    Used for making px values convert to rem values\n    Usage: define font-size in px and it will convert to rems\n    eg. font-size: rem(14px);\n*/\n\n@function rem($target, $context: $base-font-size) {\n   @if $target == 0 { @return 0 }\n   @return $target / $context + 0rem;\n}\n$base-font-size:16px;","footer {\n  @include span(12);\n  background:#2e2e2e;\n  color:#fff;\n  padding:10px 0;\n  h2 {\n    color:#fff;\n  }\n  a {\n    color: #9cccff;\n  }\n}","nav{\n  .container{\n    margin-top:20px;\n    text-align:center;\n    ul{\n      li{\n        display: inline;\n        padding:5px 10px;\n        @include phones{\n          display:block;\n          width:100%;\n        }\n          a{\n            font-family:Dosis, serif;\n            color:#000;\n            font-size:2rem;\n            text-decoration:none;\n            border-bottom:1px solid black;\n          }\n      }\n    }\n  }\n}"],"sourceRoot":"/source/"}